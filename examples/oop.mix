// OOP (Object Oriented Programming) example

class Organism

    // Class properties
    pub num health = 10 
    pub String name = "?"

    pub const organismName = "unknown organism"

    // Constructors
    Organism()
        print("Hi, I don't have a name")
    end

    Organism(String name)
        print(`Hi! Hmm... ${name} is a nice name!`)
        
        // 'name' already exists in this scope so we have to use 'self'
        self.name = name
    end

    // Functions

    // Functions with the 'pub' keyword are public and can be accessed through the class' object
    pub void damage(num amount)
        print("ow")
        health -= amount
        
        if health <= 0
            die()
        end

    end

    // This function does not have 'pub' so it's not public. Calling it outside of the class would cause an error
    void die()
        health = 0
    end

end

class Human
    extends Organism

    // 'organismName' will be overriden, even if it's a const
    pub const String organismName = "human"

    pub String getQuote()
        return "I think therefore I am"
    end

    void die()
        print("Goodbye cruel world")

        // 'super' is the lower instance of the class, in this case 'Organism'
        // In this case, calling the die() function would first print "Goodbye cruel world" then execute die() in Organism, setting 'health' to 0

        super.die()
    end

end

class Nerd 
    extends Human

    // Override the Organism constructor
    Nerd()
        print("Hello, would you like to talk about open source?")
    end

    // Override the Human 'getQuote' function
    pub String getQuote()
        return "btw i use arch"
    end

    pub void writeCode()
        print("I refuse. I'm not gonna use the Lua-like abomination.")
    end

end

// Create instances of the classes defined above and call getQuote() on them

const human = Human()
print( human.getQuote() ) // I think therefore I am

const nerd = Nerd()
print( nerd.getQuote() ) // btw i use arch